import os
import re
import asyncio
import warnings
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from g4f.client import Client
from docx import Document
from docx.shared import Pt
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
import uuid

warnings.filterwarnings("ignore", category=RuntimeWarning)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_ID = 1404494933  # ID –∞–¥–º–∏–Ω–∞
ONE_TIME_KEYS = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∫–ª—é—á–µ–π

class Form(StatesGroup):
    theme = State()
    working = State()
    access_code = State()

client = Client()
bot = Bot(token="7722309470:AAF_WkaBZvK5iyS3kw0O2dpfLYrGLmG5o5k")
dp = Dispatcher()

def sanitize_filename(name):
    clean_name = re.sub(r'[\\/*?:"<>|]', "", name)
    clean_name = clean_name.replace(" ", "_")[:50]
    return clean_name.strip()

def get_filename(user_id, theme):
    safe_theme = sanitize_filename(theme)
    return f"{safe_theme}_{user_id}.md"

def format_response(text):
    text = re.sub(r'```(\w+)?\n(.*?)```', lambda m: f"\n{m.group(2)}\n", text, flags=re.DOTALL)
    text = re.sub(r'`(.*?)`', lambda m: f"{m.group(1)}", text)
    return text.strip()

async def generate_structure(theme):
    try:
        prompt = (
            f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏–ø–ª–æ–º–∞ –Ω–∞ —Ç–µ–º—É '{theme}' —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É X.X. "
            "–í–∫–ª—é—á–∏ 4 –≥–ª–∞–≤—ã —Å 3 –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º–∏ –∫–∞–∂–¥–∞—è. –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: "
            "4. –ì–ª–∞–≤–∞ 4\n4.1. –ü–æ–¥—Ä–∞–∑–¥–µ–ª 1\n4.2. –ü–æ–¥—Ä–∞–∑–¥–µ–ª 2"
        )
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            web_search=False
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}"

async def generate_subsection_content(theme, section):
    try:
        prompt = (
            f"–ù–∞–ø–∏—à–∏ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ '{section}' –¥–∏–ø–ª–æ–º–∞ –Ω–∞ —Ç–µ–º—É '{theme}'. "
            "–û–±—ä–µ–º: 3000-3500 —Å–ª–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã. "
            "–û—Ñ–æ—Ä–º–∏ –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ markdown."
        )
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            web_search=False
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∞: {str(e)}"

def update_md_file(user_id, theme, content, section):
    filename = get_filename(user_id, theme)
    mode = "a" if os.path.exists(filename) else "w"
    
    level = section.count('.') + 1
    hashes = '#' * min(level + 1, 4)
    
    with open(filename, mode, encoding="utf-8") as f:
        f.write(f"\n{hashes} {section}\n\n")
        f.write(content + "\n")
    return filename

def add_heading_with_bookmark(doc, text, level, bookmark_name):
    heading = doc.add_heading(text, level)
    paragraph = heading._element
    bookmark_start = OxmlElement('w:bookmarkStart')
    bookmark_start.set(qn('w:id'), '0')
    bookmark_start.set(qn('w:name'), bookmark_name)
    paragraph.append(bookmark_start)
    bookmark_end = OxmlElement('w:bookmarkEnd')
    bookmark_end.set(qn('w:id'), '0')
    bookmark_end.set(qn('w:name'), bookmark_name)
    paragraph.append(bookmark_end)
    return heading

def add_table_of_contents(doc):
    paragraph = doc.add_paragraph()
    run = paragraph.add_run()
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'begin')
    run._r.append(fldChar)
    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')
    instrText.text = "TOC \\o '1-3' \\h \\z \\u"
    run._r.append(instrText)
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'separate')
    run._r.append(fldChar)
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'end')
    run._r.append(fldChar)

def md_to_docx(md_filename, docx_filename):
    doc = Document()
    doc.add_heading("–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ", level=1)
    add_table_of_contents(doc)

    with open(md_filename, "r", encoding="utf-8") as md_file:
        lines = md_file.readlines()

    for line in lines:
        line = line.strip()

        if line.startswith("#"):
            header_level = line.count("#")
            header_text = line.lstrip("#").strip()
            bookmark_name = f"heading_{header_text.replace(' ', '_')}"
            add_heading_with_bookmark(doc, header_text, min(header_level, 6), bookmark_name)
        elif "**" in line:
            bold_texts = re.findall(r"\*\*(.*?)\*\*", line)
            paragraph = doc.add_paragraph()
            parts = re.split(r"\*\*.*?\*\*", line)
            for i, part in enumerate(parts):
                paragraph.add_run(part)
                if i < len(bold_texts):
                    run = paragraph.add_run(bold_texts[i])
                    run.bold = True
        elif "*" in line:
            italic_texts = re.findall(r"\*(.*?)\*", line)
            paragraph = doc.add_paragraph()
            parts = re.split(r"\*.*?\*", line)
            for i, part in enumerate(parts):
                paragraph.add_run(part)
                if i < len(italic_texts):
                    run = paragraph.add_run(italic_texts[i])
                    run.italic = True
        elif line.startswith("- "):
            paragraph = doc.add_paragraph(style="List Bullet")
            paragraph.add_run(line.lstrip("- ").strip())
        elif re.match(r"^\d+\. ", line):
            paragraph = doc.add_paragraph(style="List Number")
            paragraph.add_run(re.sub(r"^\d+\. ", "", line).strip())
        else:
            doc.add_paragraph(line)

    doc.save(docx_filename)
    print(f"–§–∞–π–ª '{docx_filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏!")

async def delete_files(*filenames):
    for filename in filenames:
        if os.path.exists(filename):
            os.remove(filename)
            print(f"–§–∞–π–ª '{filename}' —É–¥–∞–ª–µ–Ω.")

@dp.message(Command("start"))
async def start_handler(msg: types.Message, state: FSMContext):
    if msg.from_user.id == ADMIN_ID:
        await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /generate_key –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞.")
    else:
        await msg.answer("üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:")
        await state.set_state(Form.access_code)

@dp.message(Form.access_code)
async def process_access_code(msg: types.Message, state: FSMContext):
    access_code = msg.text.strip()
    if access_code in ONE_TIME_KEYS:
        ONE_TIME_KEYS.remove(access_code)
        await msg.answer("‚úÖ –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã:")
        await state.set_state(Form.theme)
    else:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @TETRIX_UNO.")

@dp.message(Command("generate_key"))
async def generate_key(msg: types.Message):
    if msg.from_user.id == ADMIN_ID:
        key = str(uuid.uuid4())
        ONE_TIME_KEYS.add(key)
        await msg.answer(f"üîë –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞: {key}")
    else:
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Form.theme)
async def process_theme(msg: types.Message, state: FSMContext):
    theme = msg.text.strip()
    await state.update_data(theme=theme, sections=[], current_section=0)
    
    loading_msg = await msg.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
    structure = await generate_structure(theme)
    
    sections = re.findall(r'\d+(?:\.\d+)*\..+?(?=\n\d|\Z)', structure, flags=re.DOTALL)
    sections = [s.strip() for s in sections if re.match(r'\d+\.', s)]
    
    await bot.delete_message(msg.chat.id, loading_msg.message_id)
    
    if "–û—à–∏–±–∫–∞" in structure or not sections:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        return
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate_structure"),
        types.InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="start_generation")
    )
    
    await state.update_data(sections=sections)
    update_md_file(msg.from_user.id, theme, structure, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç—ã")
    
    await msg.answer(
        f"üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n\n{format_response(structure)}",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "regenerate_structure")
async def regenerate_structure(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    theme = data['theme']
    
    loading_msg = await callback.message.answer("üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
    structure = await generate_structure(theme)
    sections = re.findall(r'\d+(?:\.\d+)*\..+?(?=\n\d|\Z)', structure, flags=re.DOTALL)
    sections = [s.strip() for s in sections if re.match(r'\d+\.', s)]
    
    await bot.delete_message(callback.message.chat.id, loading_msg.message_id)
    
    if "–û—à–∏–±–∫–∞" in structure or not sections:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        return
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –ï—â–µ —Ä–∞–∑", callback_data="regenerate_structure"),
        types.InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="start_generation")
    )
    
    await state.update_data(sections=sections)
    update_md_file(callback.from_user.id, theme, structure, "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
    
    await callback.message.edit_text(
        f"üìö –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n\n{format_response(structure)}",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "start_generation")
async def start_generation(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    await state.set_state(Form.working)
    await process_next_section(callback.message, state, data)

async def process_next_section(msg, state, data):
    sections = data['sections']
    current = data['current_section']
    
    if current >= len(sections):
        filename = get_filename(msg.from_user.id, data['theme'])
        docx_filename = filename.replace(".md", ".docx")
        md_to_docx(filename, docx_filename)
        
        await msg.answer_document(
            types.FSInputFile(filename),
            caption="üéì –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await msg.answer_document(
            types.FSInputFile(docx_filename),
            caption="üìÑ Word-–≤–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await delete_files(filename, docx_filename)
        
        await state.clear()
        return
    
    section = sections[current].strip()
    loading_msg = await msg.answer(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª {current+1}/{len(sections)}:\n{section[:40]}...")
    
    content = await generate_subsection_content(data['theme'], section)
    update_md_file(msg.from_user.id, data['theme'], content, section)
    
    await bot.delete_message(msg.chat.id, loading_msg.message_id)
    await msg.answer(f"‚úÖ –†–∞–∑–¥–µ–ª {current+1}/{len(sections)} –≥–æ—Ç–æ–≤!\n{section}")
    
    await state.update_data(current_section=current+1)
    new_data = await state.get_data()
    await process_next_section(msg, state, new_data)

@dp.message(Command("get_file"))
async def send_file(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    theme = data.get('theme', 'diploma')
    filename = get_filename(msg.from_user.id, theme)
    
    if os.path.exists(filename):
        await msg.answer_document(
            types.FSInputFile(filename),
            caption=f"üìÅ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç—ã: {theme}"
        )
    else:
        await msg.answer("‚ùå –§–∞–π–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
